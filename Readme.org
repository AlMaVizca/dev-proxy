#+Title: Development proxy

/Feel free to raise any issue or PR/

**** Index                                                                      :TOC:
- [[#motivation][Motivation]]
- [[#requirements][Requirements]]
-  [[#configurations-required][Configurations required]]
  - [[#network-manager-and-dnsmasq][Network manager and dnsmasq]]
- [[#start-the-service][Start the service]]
- [[#configure-backend-services][Configure backend services]]
- [[#socket-activation][Socket activation]]
  - [[#how-does-it-works][How does it works?]]
  - [[#i-just-want-it-to-work][I just want it to work.]]

* Motivation
It's common for developers to work in more than one project at the same time and
using different tools, which usually means different ports, if those ports
implement the HTTP protocol, then there is no need to remember the ports
number, and it could be accessed using DNS.

This repository is a showcase to simplify this access.

* Requirements
- Docker engine or podman
- docker-compose
- Use a local DNS

*  Configurations required
In order to resolve any subdomain, is possible to use dnsmasq.

** Network manager and dnsmasq
#+NAME: /etc/NetworkManager/dnsmasq.d/nameservers.conf
#+BEGIN_EXAMPLE
address=/docker/172.17.0.1
#+END_EXAMPLE

and restart the service:
#+BEGIN_SRC shell
  systemctl restart NetworkManager
#+END_SRC

* Start the service
Only the first time it is required to create the network
#+BEGIN_SRC shell
  make network
#+END_SRC

Then running make start it's enough. As it's the service will be always working,
if you don't want it to happen, please modify the restart configuration in docker-compose.yml
#+BEGIN_SRC shell
  make start
#+END_SRC

Check that you can access to http://proxy.docker

* Configure backend services
With that working adding the following configurations to a service in a
docker-compose:
#+BEGIN_EXAMPLE
    labels:
      traefik.enable: "true"
      traefik.http.routers.service-name.rule: "Host(`example.docker`)"
      traefik.http.services.service-name.loadbalancer.server.port: "<example-application-port>"
      traefik.webservice.service-name.entryPoints: http,ws
      traefik.http.routers.service-name.tls: "false"
      traefik.docker.network: lb
    networks:
      lb:
        aliases:
          - ${SERVICE_NAME}.${DOMAIN}
#+END_EXAMPLE

Please be sure to modify service-name to avoid duplications, the domain
'example.docker and also set the right port number on <example-application-port>

Then at the bottom of the docker-compose, you have to declare the access to the
network:
#+BEGIN_EXAMPLE
networks:
  lb:
    name: lb
    external: true
#+END_EXAMPLE

With that in place and after you start the backend service, you will be able to
access it through example.docker

* Socket activation
The idea of socket activation is to not waste resources, so you start them only
when you need it. While for the first attempt it might take a little bit to
respond, *I think* it has a good compensation, it's like a sustainability
concept. /To not use more than needed/.

** How does it works?
Nowadays it's common that GNU/Linux operative systems use [[https://systemd.io/][Systemd]]. I will leave
it for you to learn it, if you are interested.

So we will have 3 parts, It could be done in 2 if the service that you are
trying to run is able to receive a socket as a parameter, and altough it's
becoming more common, explainig a general solution for those services that don't
make the idea more complete.

On this example I will be using TCP/IP sockets, but you can choose file sockets
as well.

- The Socket service.
  It's not a service per se, but a definition on where do we want systemd to be
  monitoring or waiting for incomming communication.
  #+INCLUDE: "./socket-activation/templates/EXAMPLE.socket" example

- The Service for the socket, or proxy service.
  Usually, if not defined on the socket definition, once a message is received,
  the socket will try to start a service with the same name as the socket
  definition, and pass the listening socket to the service.
  Since not all the services are prepared, as I mention before, here we will use
  a proxy service, that it's able to direct the communication in the right path.
  So this will start the objective service, and deliver the messages to it.
  #+INCLUDE: "./socket-activation/templates/EXAMPLE.service" example
- The containerized service
  This is the actual service that we want to run.
  #+INCLUDE: "./socket-activation/templates/EXAMPLE-container.service" example

 To summarize the idea this sequence diagram might help:
 #+begin_src mermaid :file .assets/socket-activation-sequence.png
   sequenceDiagram
    User--> Socket: First message attempt
    Socket --> Socket service: Initiate the proxy service
    Socket service --> Containerized service: Start the objective service, and delegate the messages.
    Containerized service --> User: Respond to the user.
#+end_src

#+RESULTS:
[[file:.assets/socket-activation-sequence.png]]


*Note:* To make this work with TCP/IP, it's required to use 2 different IP
addresses, if you want to use the same port, or either use differnt port.
I prefere different IPs because then I can have a proxy for docker and another
for podman.

** I just want it to work.
From theory to making it works requires an extra effort, and because I don't
like to waste time neither, you can just define your preferences on the /.env/
file and run:
#+begin_src sh
  make install-sockets
#+end_src
